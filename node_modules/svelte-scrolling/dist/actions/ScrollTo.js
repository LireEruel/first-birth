"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const store_1 = require("svelte/store");
const store_2 = require("../store");
const globalOptions_1 = require("../internal/globalOptions");
const utils_1 = require("../shared/utils");
const scrolling_1 = __importDefault(require("../shared/scrolling"));
const elementsList = (0, store_1.get)(store_2.elements);
// handle with scrolling
const handle = async (event, options) => {
    event.preventDefault();
    const { ref, onDone, onStart } = options;
    /* eslint-disable @typescript-eslint/no-non-null-assertion */
    const duration = options.duration;
    const offset = options.offset;
    const easing = options.easing;
    const element = (0, utils_1.getElement)(elementsList, ref);
    if (!element) {
        throw new Error(`Element reference '${ref}' not found`);
    }
    const endPosition = (0, utils_1.getPosition)(element);
    onStart && onStart({ element, offset, duration, endPosition });
    await (0, scrolling_1.default)(endPosition, { duration, offset, easing });
    onDone && onDone({ element, offset, duration, endPosition });
};
/**
 * Listens for click (touchstart) events and scrolls to elements with smooth animation
 *
 * @param options - The element reference or global options
 */
const scrollTo = (// eslint-disable-line @typescript-eslint/explicit-module-boundary-types
node, options) => {
    if (!options) {
        throw new Error('scrollTo require a options');
    }
    let opts = {
        ref: '',
        ...(0, globalOptions_1.getGlobalOptions)()
    };
    typeof options === 'string'
        ? opts.ref = options
        : opts = Object.assign(opts, options);
    opts.ref = (0, utils_1.sanitize)(opts.ref);
    if (!opts.ref) {
        throw new Error('scrollTo require a reference');
    }
    if (node instanceof HTMLAnchorElement) {
        node.href = `#${opts.ref}`;
    }
    if (node instanceof HTMLAnchorElement === false) {
        node.style.cursor = 'pointer';
    }
    node.addEventListener('click', event => handle(event, opts));
    node.addEventListener('touchstart', event => handle(event, opts));
    return {
        destroy() {
            node.removeEventListener('click', event => handle(event, opts));
            node.removeEventListener('touchstart', event => handle(event, opts));
        }
    };
};
exports.default = scrollTo;
