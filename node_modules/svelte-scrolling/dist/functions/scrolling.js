"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.scrollPosition = exports.scrollElement = exports.scrollBottom = exports.scrollTop = void 0;
const store_1 = require("svelte/store");
const store_2 = require("../store");
const globalOptions_1 = require("../internal/globalOptions");
const utils_1 = require("../shared/utils");
const scrolling_1 = __importDefault(require("../shared/scrolling"));
const globalOptions = (0, globalOptions_1.getGlobalOptions)();
/**
 * Scroll to the top of the page
 *
 * @param options - An optional param with global options
 */
const scrollTop = async (options) => {
    const opts = Object.assign(globalOptions, options);
    const endPosition = 0;
    const { duration, offset, onStart, onDone } = opts;
    onStart && onStart({ offset, duration, endPosition });
    await (0, scrolling_1.default)(endPosition, opts);
    onDone && onDone({ offset, duration, endPosition });
};
exports.scrollTop = scrollTop;
/**
 * Scroll to the end of the page
 *
 * @param options - An optional param with global options
 */
const scrollBottom = async (options) => {
    const opts = Object.assign(globalOptions, options);
    const { duration, offset, onStart, onDone } = opts;
    const body = document.body;
    const html = document.documentElement;
    const endPosition = Math.max(body.scrollHeight, body.offsetHeight, html.scrollHeight, html.clientHeight, html.offsetHeight);
    onStart && onStart({ offset, duration, endPosition });
    await (0, scrolling_1.default)(endPosition, opts);
    onDone && onDone({ offset, duration, endPosition });
};
exports.scrollBottom = scrollBottom;
/**
 * Scroll to element
 *
 * @param reference - The element reference
 * @param options - An optional param with global options
 */
const scrollElement = async (reference, options) => {
    if (!reference || typeof reference !== 'string') {
        throw new Error('scrollElement require a reference valid');
    }
    const opts = Object.assign(globalOptions, options);
    const ref = (0, utils_1.sanitize)(reference);
    const { duration, offset, onStart, onDone } = opts;
    const elementsList = (0, store_1.get)(store_2.elements);
    const element = (0, utils_1.getElement)(elementsList, ref);
    if (!element) {
        throw new Error(`Element reference '${ref}' not found`);
    }
    const endPosition = (0, utils_1.getPosition)(element);
    onStart && onStart({ element, offset, duration, endPosition });
    await (0, scrolling_1.default)(endPosition, opts);
    onDone && onDone({ element, offset, duration, endPosition });
};
exports.scrollElement = scrollElement;
/**
 * Scroll to a position on the page
 *
 * @param position - The position
 * @param options - An optional param with global options
 */
const scrollPosition = async (position, options) => {
    if (!position || typeof position !== 'number') {
        throw new Error('scrollPosition require a position value valid');
    }
    const opts = Object.assign(globalOptions, options);
    const endPosition = position;
    const { duration, offset, onStart, onDone } = opts;
    onStart && onStart({ offset, duration, endPosition });
    await (0, scrolling_1.default)(endPosition, opts);
    onDone && onDone({ offset, duration, endPosition });
};
exports.scrollPosition = scrollPosition;
